{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Geospatial Data Processing in R","text":"<p>Materials for the course KFG/7ZGER - Introduction to Geospatial Data Processing in R taught at the Department of Physical Geography and Geoecology of the University of Ostrava. The course is intended for students of envionmental geography.</p> <p>Warning</p> <p>The materials are inconsistent and incomplete. They primarily serve to summarize individual exercises to facilitate orientation in the course during self-study. For detailed information, it is necessary to attend the exercises or seek information in the recommended sources.</p>"},{"location":"#moodle","title":"Moodle","text":"<p>The current year's course is conducted on Moodle, where information for individual exercises and especially assignments can be found:</p> <p>KFG/7ZGER - Spring semester 24/25</p>"},{"location":"#other-courses","title":"Other courses","text":""},{"location":"basics/","title":"R Basics","text":""},{"location":"basics/#r-as-a-calculator","title":"R as a calculator","text":"<pre><code>1 + 1\n</code></pre> <pre><code>[1] 2\n</code></pre> <p>use <code>**</code> or <code>^</code> for exponentiation</p> <pre><code>5 * 5 / (3 + 10)\n5**2 / (3 + 10)\n</code></pre>"},{"location":"basics/#comparsion","title":"Comparsion","text":"<p>You can also test if values meets some condition</p> <ul> <li><code>==</code> - equals</li> <li><code>!=</code> - not equals</li> <li><code>&gt;</code> - greater than</li> <li><code>&lt;</code> - less than</li> <li><code>&gt;=</code> - greater or equal</li> <li><code>&lt;=</code> - less or equal</li> </ul> <pre><code>5 == 5\n</code></pre> <pre><code>[1] TRUE\n</code></pre> <p>try: <pre><code>5 &gt; 10\n6 != 6\n10 &lt;= 10\n8 &gt; 2 * 3\n</code></pre></p>"},{"location":"basics/#variables","title":"Variables","text":"<p>Values and objects can be stored in variables with assigment operator <code>&lt;-</code> (or <code>=</code>), but <code>&lt;-</code> is more common, and will be used in this course. Calling the variable name will return the value stored in it.</p> <pre><code>x &lt;- 42\n\nx\n</code></pre> <pre><code>[1] 42\n</code></pre> <pre><code>x &lt;- 7\ny &lt;- 6\n\ny * x\n</code></pre> <p>Assigning a value to existing variable will overwrite the previous value.</p> <pre><code>x &lt;- 7\ny &lt;- 6\nx &lt;- 2\n\ny * x\n</code></pre> <p>try: <pre><code>x &lt;- 5\ny &lt;- 10\nz &lt;- x + y\nz\n</code></pre></p> <p>Variables names:</p> <ul> <li>can't contain spaces and special characters</li> <li>can't start with number</li> <li>are case sensitive</li> <li>can't be some reserved words (<code>if</code>, <code>for</code>, ...)</li> </ul> <pre><code>variable1 &lt;- 5\nvariable1\n</code></pre> <p><pre><code>1variable &lt;- 5\n1variable\n</code></pre> The convention is to use descriptive but not excessive long variable names. There are tree main types of naming in R:</p> <ul> <li>snake_case - used in this course</li> <li>camelCase</li> <li>dot.case</li> </ul> <p>Use what you like, but be consistent.</p> <pre><code>my_variable &lt;- 5\nmy_variable\n</code></pre>"},{"location":"basics/#functions","title":"Functions","text":"<p>Calling function consist of function name and arguments in parentheses. Arguments can be named or unnamed.  <code>function_name(argument1 = value1 ,argument2 = value2, argument3 = value3, ...)</code>. Some functions doesn't have  any arguments (<code>getwd()</code>).</p> <p><pre><code>sin(5)\nsqrt(25)\n</code></pre> You can get function help using RStudio GUI or calling <code>?</code> before the function name, or <code>help()</code> function.</p> <pre><code>?sqrt\n</code></pre>"},{"location":"basics/#writing-script","title":"Writing script","text":"<p>As mentioned in the Introduction to R there are various ways to write and run code in R, interacively in the console, or writing scripts that can be saved and run later (entire or by parts). Most of the time you will write code to scripts (<code>.R</code> or <code>.r</code> files). Code can be written in any text editor.</p> <p>In RStudio you can write and save scripts in the Source pane. You can run the entire script or just the selected part of the code. </p> <ul> <li> <p>Run selected part of the code - <code>Ctrl + Enter</code> - or button <code>Run</code> - this you willl use mostly in this course. You can run the code line by line, or by selected blocks. This function sends the code to the console and run it, and the cursor will move to the next line or executable part of code.</p> </li> <li> <p>Run entire script - <code>Ctrl + Shift + S</code> - or button <code>Source</code> - this use a <code>source()</code> function, and run entire script (as file) in console.</p> </li> </ul> <p>In writing scripts you can \"comment\" lines. Commented lines starts with <code>#</code> and are not executed (even if they are sent to the console). Coments are useful for documenting/explanation code or \"deactivating\" parts of code.</p> <pre><code># Do some math\nx &lt;- 5\ny &lt;- 8\n# y &lt;- 10\n\nx + y\n</code></pre>"},{"location":"data/","title":"Data","text":""},{"location":"data_types/","title":"Data structures","text":""},{"location":"data_types/#data-object-types","title":"Data object types","text":"<p>primary (atomic) types in R:</p> <ul> <li>double - decimal and real numbers</li> <li>integer - whole numbers</li> <li>character - text</li> <li>logical - TRUE or FALSE</li> <li>(complex - complex numbers)</li> </ul> <p>Note</p> <p>Object can have an attributes - properties like <code>class</code>, <code>length</code>, <code>names</code>, <code>dim</code>, <code>attributes</code>, that can called or set with with some functions like <code>class()</code>, <code>length()</code>, <code>names()</code>, <code>dim()</code>, <code>attributes()</code>.</p> <p>Check the type of the object with <code>typeof()</code> function. This returns the low level datatype of the object sotred in memory.</p> <pre><code>some_text &lt;- \"Hello, world!\"\ntypeof(some_text)\n</code></pre> <pre><code>[1] \"character\"\n</code></pre> <pre><code>x &lt;- 5 == 5\ntypeof(x)\n</code></pre> <p><pre><code>[1] \"logical\"\n</code></pre> <pre><code>x &lt;- \"5\"\ntypeof(x)\n</code></pre></p> <p><pre><code>[1] \"character\"\n</code></pre> Conversion between classes can be done with <code>as.</code> functions. <pre><code>\"5\" + 5\nx &lt;- as.numeric(\"5\")\nx + 5\n</code></pre></p>"},{"location":"data_types/#data-structures_1","title":"Data structures","text":"<ul> <li>vector - one dimensional sequence of values of the same class</li> <li>matrix - two dimensional </li> <li>array - multi-dimensional</li> <li>data.frame - two dimensional array of values, values can be different classes</li> <li>list - collection of objects, can be different classes</li> <li>factor - vector of categorical values</li> </ul> <p>In this course we will mainly work with vectors, data frames and lists in less or more complex structures.</p>"},{"location":"data_types/#atomic-vectors","title":"Atomic vectors","text":"<p>Most basic data structure in R. Sequence of data of same type. Can be created by concatenating values using <code>c()</code> function (mostly used), or creating empty vector with <code>vector()</code> function. Lot of functions also returns vectors (like <code>seq()</code>). Atomic vectors are usually refered as vectors.</p> <pre><code>c(1, 15, 4, 6)\n</code></pre> <p><pre><code>[1]  1 15  4  6\n</code></pre> make a sequence of numbers with <code>seq()</code> function and arguments <code>from</code>, <code>to</code>, <code>by</code>: <pre><code>seq(1, 10, by = 2)\n</code></pre></p> <p><pre><code>[1] 1 3 5 7 9\n</code></pre> or with <code>:</code> operator: <pre><code>1:10\n</code></pre></p> <p><pre><code>[1]  1  2  3  4  5  6  7  8  9 10\n</code></pre> sequence of characters:</p> <pre><code>c(\"a\", \"b\", \"c\")\n</code></pre> <pre><code>[1] \"a\" \"b\" \"c\"\n</code></pre> <p>Vectors can't contain values of different types, various classes well be converted, see <code>?c</code>.</p> <pre><code>c(\"123\", 456, TRUE)\n</code></pre> <pre><code>[1] \"123\"  \"456\"  \"TRUE\"\n</code></pre> <p>Info</p> <p>The number at the beginning of the line <code>[1]</code> is the index (oreder number) of the first element on the terminal line. It can be useful later when we will work with more complex data and use subsetting.</p> <p>try: <pre><code>seq(1, 1000, by= 5)\n</code></pre></p> <p>You can do calculaion with vectors. <pre><code>x &lt;- c(1, 2, 3, 4)\nx * 5\n</code></pre></p> <pre><code>[1]  5 10 15 20\n</code></pre> <p>You can do operations with vectors of the same length.</p> <pre><code>x &lt;- c(1, 2, 3, 4)\ny &lt;- c(5, 6, 7, 8)\n\nx + y\n</code></pre> <pre><code>[1]  6  8 10 12\n</code></pre> <p>Adding element to vector:</p> <pre><code>x &lt;- c(\"a\", \"b\", \"c\")\nx\n\nx &lt;- c(x, \"d\")\nx\n</code></pre> <p>Function <code>length()</code> returns the length of the vector (value of attribute length).</p> <pre><code>x &lt;- c(1, 2, 3, 4)\nlength(x)\n</code></pre> <pre><code>[1] 4\n</code></pre> <p>Note</p> <p>You can also use attribute <code>name</code> and assign names to vector elements. <pre><code>x &lt;- c(1, 2, 3, 4)\nx\n\nnames(x) &lt;- c(\"first\", \"second\", \"third\", \"fourth\")\nx\nattributes(x)\n</code></pre> or simply: <pre><code>x &lt;- c(first = 1, second = 2, third = 3, fourth = 4)\nx\nattributes(x)\n</code></pre></p> <p>Function <code>sum()</code> returns the sum of the vector. <pre><code>x &lt;- c(1, 2, 3, 4)\nsum(x)\n</code></pre></p> <pre><code>[1] 10\n</code></pre> <p>try: <pre><code>x &lt;- c(5, 8, 13, 51)\nmean(x)\nmin(x)\nmax(x)\ntypeof(x)\n\ny &lt;- c(1, 2, \"c\", \"4\")\nmean(y)\n</code></pre></p> <p>Function <code>str()</code> returns the structure of object. This is useful for more complex objects, but you can use it for vectors too. <pre><code>x &lt;- c(5, 8, 13, 51)\nstr(x)\n</code></pre></p>"},{"location":"data_types/#matrix-and-arrays","title":"Matrix and arrays","text":"<p>We wont't use them much in this course, so I describe them only briefly. They are similar to vectors (technically they are vectors with <code>dim</code> attribute), but with two or more dimensions. Matrix is two dimensional, array is multi-dimensional. You can create them with <code>matrix()</code> and <code>array()</code> functions.</p> <pre><code>m &lt;- matrix(1:6, nrow = 2, ncol = 3)\nm\n</code></pre> <pre><code>     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n</code></pre> <p><pre><code>a &lt;- array(1:12, dim = c(2,3,2))\na\n</code></pre> <pre><code>, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n</code></pre></p> <p>Vectors, matrices and arrays can be converted.  Try:</p> <pre><code>a &lt;- array(1:12, dim = c(2,3,2))\nc(a)\nm &lt;- matrix(1:6, nrow = 2, ncol = 3)\nc(m)\nv &lt;- 1:10\ndim(v) &lt;- c(2,5)\nv\nv2 &lt;- c(1:12)\ndim(v2) &lt;- c(2,3,2)\n</code></pre>"},{"location":"data_types/#lists","title":"Lists","text":"<p>Also vectors - collection of objects, which can be different classes. Can be created with <code>list()</code> function. This is fundamental data structure in R, and you can store any objects in it, for example another list.</p> <pre><code>my_list &lt;- list(1, \"a\", TRUE)\nmy_list\n</code></pre> <p>nesting lists: <pre><code>my_list &lt;- list(1, \"a\", TRUE)\nnested_list &lt;- list(my_list, 2, \"b\", FALSE)\nnested_list\n</code></pre></p> <p>list can be named <pre><code>named_list &lt;- list(number = 1, text = \"a\", boolean = TRUE)\nnamed_list\n</code></pre></p>"},{"location":"data_types/#data-frame","title":"Data frame","text":"<p>Data frames in R is structure similar to common tables. It is two dimensional array of values, where columns can be different classes. It can be created with <code>data.frame()</code> function. In next section we will learn how to create a data frame from <code>.csv</code> table with <code>read.csv()</code> function. Another representation of data frame is <code>tibble</code> from <code>tidyverse</code>, or <code>data.table</code> from <code>data.table</code> package, but we will use <code>data.frame</code> through the course.</p> <pre><code>df &lt;- data.frame(species = \"species A\", count = 5, year = 2020)\ndf\n</code></pre> <pre><code>df &lt;- data.frame(species = c(\"species A\",\"species B\",\"species C\"), count = c(5,10,7), year = c(2020,2020,2020))\ndf\n\nclass(df)\nstr(df)\n\ntypeof(df)\n</code></pre>"},{"location":"data_types/#subsetting-data-with-and","title":"Subsetting data with <code>[ ]</code>, <code>[[ ]]</code> and <code>$</code>","text":"<p>Subsetting is basic operation which is used to extract part of the data. You can subset data with brackets <code>[ ]</code>, <code>[[ ]]</code> or <code>$</code> operator.</p>"},{"location":"data_types/#brackets-and","title":"brackets <code>[ ]</code> and <code>[[ ]]</code>","text":"<p>Single brackets are used to subset vectors, lists, matrices and arrays. You can subset data by index:</p>"},{"location":"data_types/#subsetting-vectors","title":"Subsetting vectors","text":"<pre><code>v &lt;- c(123,789,451,657)\n</code></pre> <pre><code>v[3]\n</code></pre> <pre><code>[1] 451\n</code></pre> <p>You can subset data also by logical vector. In this example we want only values greater than 500:</p> <pre><code>v[v &gt; 500]\n# sames as\n# v[c(FALSE, TRUE, FALSE, TRUE)]\n# just we calculate the vector of logical values with\n# v &gt; 500\n</code></pre> <pre><code>[1] 789 657\n</code></pre> <p>You can subset data also by names:</p> <p><pre><code>v &lt;- c(first = 123, second = 789, third = 451, fourth = 657)\nv[\"third\"] # returns vector\n</code></pre> <pre><code>third \n  451  \n</code></pre></p> <p><pre><code>v[[\"third\"]] # also returns vector, but drop names\n</code></pre> <pre><code>[1] 451\n</code></pre></p>"},{"location":"data_types/#subsetting-lists","title":"Subsetting lists","text":"<p>If we have this list: <pre><code>my_list &lt;- list(1, \"a\", TRUE, c(123,456,789))\n</code></pre></p> <p>Single brackets <code>[ ]</code> returns list of subsetted data: <pre><code>my_list[2] \n</code></pre></p> <p><pre><code>[[1]]\n[1] \"a\"\n</code></pre> <pre><code>my_list[4] \n</code></pre></p> <p><pre><code>[[1]]\n[1] 123 456 789\n</code></pre> <pre><code>class(my_list[4])\n</code></pre></p> <p><pre><code>[1] \"list\"\n</code></pre> Double brackets <code>[[ ]]</code>returns the vector of subsetted data : <pre><code>my_list[[2]]\n</code></pre> <pre><code>[1] \"a\"\n</code></pre> <pre><code>my_list[[4]]\n</code></pre> <pre><code>[1] 123 456 789\n</code></pre> <pre><code>class(my_list[[4]])\n</code></pre></p> <p><pre><code>[1] \"numeric\"\n</code></pre> Brackets can be used subsequently: <pre><code>my_list[[4]][2]\n</code></pre> <pre><code>[1] 456\n</code></pre></p>"},{"location":"data_types/#subsetting-dataframe","title":"Subsetting data.frame","text":"<p>same as lists, but you can also subset row and column, sperated by comma:</p> <pre><code>df &lt;- data.frame(species = c(\"species A\",\"species B\",\"species C\"), count = c(5,10,7), year = c(2020,2020,2020))\ndf\n</code></pre> <pre><code>    species count year\n1 species A     5 2020\n2 species B    10 2020\n3 species C     7 2020\n</code></pre> <p>Subset column: <pre><code>df[\"species\"] #or df[1]\n</code></pre></p> <p><pre><code>    species \n1 species A \n2 species B \n3 species C \n</code></pre> Subset column returnig vector:</p> <pre><code>df[[\"species\"]] #or df[[1]]df$species\n</code></pre> <p><pre><code>[1] \"species A\" \"species B\" \"species C\"\n</code></pre> Subset rows:</p> <pre><code>df[2,]\n</code></pre> <p><pre><code>    species count year\n2 species B    10 2020\n</code></pre> Subset row and column:</p> <pre><code>df[2, \"species\"] #or df[2, 1]\n</code></pre> <p><pre><code>[1] \"species B\"\n</code></pre> remember, you can always use variable names instead of indexes:</p> <pre><code>row_number &lt;- 2\ncolumn_name &lt;- \"species\"\ndf[row_number, column_name]\n</code></pre> <pre><code>[1] \"species B\"\n</code></pre>"},{"location":"data_types/#operator","title":"<code>$</code> operator","text":"<p><code>$</code> operator is used to subset list or column of data frame by name. </p> <pre><code>named_list &lt;- list(number = 1, text = \"a\", boolean = TRUE, numbers = c(123,456,789))\nnamed_list$numbers # same as named_list[[\"numbers\"]] or named_list[[4]]\n</code></pre> <pre><code>[1] 123 456 789\n</code></pre> <pre><code>df &lt;- data.frame(species = c(\"species A\",\"species B\",\"species C\"), count = c(5,10,7), year = c(2020,2020,2020))\n\ndf$species # same as df[[\"species\"]] or df[[1]]\n</code></pre> <pre><code>[1] \"species A\" \"species B\" \"species C\"\n</code></pre> <p>Tip</p> <p>You can also add columns to data.frame or elements to named list with <code>[ ]</code> or <code>$</code>, simply declaring its name as its exists:</p> <p>data.frame: <pre><code>df$source &lt;- \"field_obs\"\n# or\ndf[\"source\"] &lt;- \"field_obs\"\ndf\n</code></pre></p> <p><pre><code>    species count year    source\n1 species A     5 2020 field_obs\n2 species B    10 2020 field_obs\n3 species C     7 2020 field_obs\n</code></pre> named list: <pre><code>named_list &lt;- list(number = 1, text = \"a\", boolean = TRUE)\nnamed_list$vect &lt;- c(123,456,789)\nnamed_list\n</code></pre> <pre><code>$number\n[1] 1\n\n$text\n[1] \"a\"\n\n$boolean\n[1] TRUE\n\n$vect\n[1] 123 456 789\n</code></pre></p>"},{"location":"data_types/#missing-values-na","title":"Missing values <code>NA</code>","text":"<p><code>NA</code> is simply missing value, <code>NaN</code> is 'not a number' (and its also <code>NA</code>). <code>NA</code> can be any type, but <code>NaN</code> is double. You can check if value is <code>NA</code> with <code>is.na()</code> function.</p> <p>Numeric vector <pre><code>x &lt;- c(123, 456, NA, 789, NaN)\n</code></pre></p> <p>Check which values are <code>NA</code>: <pre><code>is.na(x)\n</code></pre></p> <pre><code>[1] FALSE FALSE  TRUE FALSE  TRUE\n</code></pre> <p>Check which values are <code>NaN</code>: <pre><code>is.nan(x)\n</code></pre></p> <pre><code>[1] FALSE FALSE FALSE FALSE  TRUE\n</code></pre> <p><code>NA</code> values can cause problems in calculations</p> <pre><code>mean(x)\n</code></pre> <p><pre><code>[1] NA\n</code></pre> We can usually remove <code>NA</code> values with <code>na.rm</code> or similar argument, see help for function with <code>?</code>:</p> <pre><code>mean(x, na.rm = TRUE)\n</code></pre> <pre><code>[1] 456\n</code></pre> <p><code>NA</code> values can be also removed directly with <code>na.omit()</code> function:</p> <pre><code>na.omit(x)\n</code></pre> <pre><code>[1] 123 456 789\nattr(,\"na.action\")\n[1] 3 5\nattr(,\"class\")\n[1] \"omit\"\n</code></pre> <p>String vector (note that <code>NA</code> is not quoted in result):</p> <pre><code>x &lt;- c(\"a\", \"b\", NA, \"c\", NaN)\nx\n</code></pre> <pre><code>[1] \"a\"   \"b\"   NA    \"c\"   \"NaN\"\n</code></pre>"},{"location":"files_workflow/","title":"Reading and writing files, script workflow","text":""},{"location":"intro/","title":"Introduction to R","text":""},{"location":"intro/#what-is-r","title":"What is R?","text":"<ul> <li>R is a programming language for statistical computing but...</li> <li>... you can use it without any knowledge of statistics - to do data manipulation, data visualization, and more (file    handling, automatization, web scraping, ...)</li> <li>it is open-source, free and multiplatform</li> <li>https://cran.r-project.org/</li> <li>R can be used in two ways: interactively in command line or the code can be saved in scripts - files    with code (<code>.R</code>, <code>.r</code>)</li> <li>the scripts can be written in any text editor, but there are specialized software to make writing and running code   easier: IDEs (Integrated Development Environment)</li> <li>the most popular IDE for R is RStudio -    https://posit.co/download/rstudio-desktop/</li> <li>other IDEs: Visual Studio Code, Jupyter Notebook, Vim, Emacs, and recently Positron (IDE based on VS Code)</li> <li>so R \u2260 RStudio</li> </ul>"},{"location":"intro/#why-programming-for-spatial-data-handling","title":"Why programming for spatial data handling?","text":"<ul> <li>why write programs/scritps when I can already can do the same in Excel, QGIS, ArcGIS, ... ?</li> <li> <p>practically, you can do the same, but with programming you writing the \"reciepe\" how to do it, which can leads to:</p> <ul> <li>reproducibility - run the code again, share, collaborate when coding</li> <li>flexibility - do the same task with different data, change/improve parts of the workflow anytime</li> </ul> </li> </ul> <p>Example</p> <p>Imagine this GIS task: Get mean evelation for 1 km area around occurrence of specific species A. So the task will be  something like:</p> <ol> <li>read point vector data (shapefile, geopackage, ...)</li> <li>retrieve only points with specific attribute (species is <code>species A</code>)</li> <li>do 1 km buffer around the points</li> <li>read the raster data (DEM)</li> <li>extract raster values for the buffer areas, and calculate the mean</li> <li>write it to a file</li> </ol>  But than... <p>... what if you need to make same changes in workflow? Like:</p> <ul> <li>do this for all other species in the dataset ...</li> <li>... and for multiple buffer distances ...</li> <li>and for other 100 raster tiffs in the direcotry or on servers (monthly temperatures, percipitation, pressure, ...)</li> </ul> <p>You can also do this in desktop applications, but it will be time consuming and inefficient. With writing the workflow  in R, you can easily change the parameters, set multiple values run it on multiple datasets, with minimal effort  compared to manual work.</p>"},{"location":"intro/#r-syntax","title":"R syntax","text":"<ul> <li>no strinct syntax rules, and naming conventions</li> <li>many ways to do the same thing</li> <li>many packages for different tasks </li> <li>many packages for same tasks</li> <li>code styles /\"grammar\" - base R, tidyverse, data.table, </li> </ul>"},{"location":"intro/#installation-of-r","title":"Installation of R","text":"<ul> <li>Download R from https://cran.r-project.org/<ul> <li>choose your system (Windows, macOS or Linux) and follow the instruction</li> <li>for windows: choose base distribution, than click Download R-4.x.x for Windows and follow the installation     wizard</li> </ul> </li> </ul> <p>After installation, you can run R with inbuild IDE Rgui on directly in terminal. But in the course we will use  RStudio, and I recommend this to all beginners.</p>"},{"location":"intro/#rstudio","title":"Rstudio","text":"<p>RStudio is the most popular IDE and de facto standard for R programming. It is free and open-source, and you can  download it from https://rstudio.com/products/rstudio/download/.  Just download the installer for your system and follow the installation wizard. Than you can run RStudio and start coding. </p> <p>Note</p> <p>You have to have R installed before you install RStudio.</p> <p>We won't go too much into details for now, and just show the basic interface and useful settings for start. Other settings  will be covered during the course.</p>"},{"location":"intro/#interface","title":"Interface","text":"<p>The GUI consists of four main panes, which can be customized and rearranged. But for now we will focus on two of them:</p> <ul> <li>Console - here you can write and run code interactively</li> <li>Source - here you can write and save your scripts (files with code), and also send the parts of the code to the    console</li> </ul>"},{"location":"intro/#project-workflow","title":"Project workflow","text":"<p>Following settings are not necessary at the beginning, but is good to know them and avoid building a bad habits.</p> <ul> <li>.RData workspace - R can save the entire workspace (all objects, variables, functions, ...) to the <code>.RData</code> file, which can be    restored. Don't use the workspace. Better practice is write your scripts in a way that they recreate the worksapce.<ul> <li>option to set: Tools -&gt; Global options -&gt; General/basic tab: Workspace - Restore .RData - uncheck; .RData on exit Never</li> </ul> </li> <li>text encoding - use UTF-8 when saving files.<ul> <li>option to set: Tools -&gt; Global options -&gt; Code/Saving tab -&gt; Default text encoding: UTF-8</li> </ul> </li> <li>Working directory - the directory where the R console is launched. This is important when you want to work with files.    The working directory can be confortably changed with the function <code>setwd()</code>, but its not so good practice, and its    better to make habit to work with relative paths in project directory based workflow. This ensures that the code will   work without changes if you move the project direcory to another place, renaming part of path, use other IDE, use Git etc.    In RStudio you can use for this purpose the Project feature, which creates a project file <code>.Rproj</code> in the project    directory. Loading <code>.Rproj</code> automatically set the working directory to the project directory.<ul> <li>no option to set, jsut keep in mind that you are working in project directory, use relative paths while    working with files and save <code>.Rproj</code> (if you use RStudio)   file in the project directory</li> <li>creating project - File -&gt; New Project...</li> <li>opening existing project - File -&gt; Open Project... or File -&gt; Recent Projects</li> <li>RStudio opens last project by default, but you can change this in Tools -&gt; Global options -&gt; General/basic    tab: Default working directory - disable Restore most recently opened project at startup</li> </ul> </li> </ul>"},{"location":"sources/","title":"Sources","text":"<p>https://cran.r-project.org/doc/manuals/r-release/R-lang.html https://ds-pl-r-book.netlify.app/</p>"},{"location":"sources/#project-workflow","title":"project workflow","text":"<ul> <li>https://rstats.wtf/projects</li> <li>https://r4ds.had.co.nz/workflow-projects.html</li> </ul>"}]}